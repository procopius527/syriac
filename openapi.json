{
	"swagger": "2.0",
	"info": {
		"version": "1.0.0",
		"title": "SEDRA IV API",
		"description": "The SEDRA API is documented in **OpenAPI format** and uses [ReDoc](https://github.com/Rebilly/ReDoc) for documentation.\n# Introduction\nThis document describes the JSON API for the Syriac Electronic Data Research Archive (SEDRA). The SEDRA project is a linguistic and literary database of Syriac language and literature focusing on providing electronic access to the corpus of Syriac lexicons with linguistic information added to each entry in those lexicons. The API is a mechanism to provide the linguistic information stored in SEDRA to a broader audience.\nAdditionally there is a XML API for Syriac words which conforms to a prototype Semitic Languages schema which can be found in the XSD file https://sedra.bethmardutho.org/api/semiticLanguages.xsd.\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/) and allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n# Samples\nExplaining how to lookup words in the SEDRA API is complex and would clutter the API description. For that reason we have chosen to give the explanation of how to lookup words in its own section. SEDRA can lookup words by the SEDRA word Id. However, it will often be the case that the consumer of information provided by the SEDRA API does not know the SEDRA word Id. It is for that reason that the SEDRA API provides a method to lookup words by the Syriac text. But that process is complicated by the nature of Syriac writing. So the SEDRA API will lookup words for consonantal, partially vocalized, and fully vocalized Syriac text. Using the word Id will provide the most accurate results as the exact word will be returned. Fully vocalized text will provide the next most accurate result. The least accurate results will be returned by partially vocalized and consonantal Syriac words in that order. Following are some samples to help understand how this works.\n1. By Word Id [30862](https://sedra.bethmardutho.org/api/word/30862.json)\n2. By fully vocalized Syriac word [ܐܰܒܳܪܳܐ](https://sedra.bethmardutho.org/api/word/ܐܰܒܳܪܳܐ.json)\n3. By partially vocalized Syriac word [ܐܶܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܶܒܪܐ.json)\n4. By consonantal Syriac word [ܐܒܪܐ](https://sedra.bethmardutho.org/api/word/ܐܒܪܐ.json).",
        "contact": {
            "email": "sedra@bethmardutho.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
	},
	"externalDocs": {
        "description": "Find out how to create a Github repo for your OpenAPI spec.",
        "url": "https://github.com/Rebilly/generator-openapi-repo"
    },
    "schemes": ["http", "https"],
	"host": "sedra.bethmardutho.org",
	"basePath": "/api",
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"tags": [{
		"name": "API"
	}],
	"x-tagGroups": [{
		"name": "",
		"tags": ["API"]
	}],
	"paths": {
		"/word/{id}": {
			"get": {
				"tags": ["API"],
				"summary": "Get Syriac word.",
				"description": "Returns an array of linguistic information for every word that matches the Syriac word. Adjustment is made if the Syriac word is consonantal, partially, or fully vocalized.",
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The id parameters must contain either the Id of a word from the Sedra database or a Syriac word in the unicode character set. When the id parameter is a Syriac word it may be consonantal, partially vocalized, or fully vocalized. Fully vocalized Syriac words will have less false positive results than partially vocalized or consonantal Syriac words. When id is the Id of a word from the SEDRA database then that word will be the only word in the result.",
					"type": "string",
					"required": true
				}],
				"responses": {
					"200": {
						"description": "An array of Syriac words.",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"required": ["word", "lexeme", "syriac"],
								"properties": {
									"word": {
										"description": "Id and link to the Syriac word.",
										"$ref": "./definitions.json#/ObjectReference"
									},
									"lexeme": {
										"description": "Id and link to the Syriac lexeme underlying this word.",
										"$ref": "./definitions.json#/ObjectReference"
									},
									"glosses": {
										"description": "Glosses available for this Syriac lexeme.",
										"$ref": "./definitions.json#/LocalizedStrings"
									},
									"syriac": {
										"description": "Consonantal form of this Syriac word.",
										"type": "string"
									},
									"western": {
										"description": "Western vocalized form of this Syriac word.",
										"type": "string"
									},
									"eastern": {
										"description": "Eastern vocalized form of this Syriac word.",
										"type": "string"
									},
									"state": {
										"$ref": "./definitions.json#/State"
									},
									"tense": {
										"$ref": "./definitions.json#/Tense"
									},
									"kaylo": {
										"$ref": "./definitions.json#/Kaylo"
									},
									"number": {
										"$ref": "./definitions.json#/Number"
									},
									"person": {
										"$ref": "./definitions.json#/Person"
									},
									"gender": {
										"$ref": "./definitions.json#/Gender"
									},
									"suffixType": {
										"$ref": "./definitions.json#/SuffixType"
									},
									"suffixNumber": {
										"$ref": "./definitions.json#/Number"
									},
									"suffixPerson": {
										"$ref": "./definitions.json#/Person"
									},
									"suffixGender": {
										"$ref": "./definitions.json#/Gender"
									},
									"hasSeyame": {
										"description": "Indicator to the presence of a Seyame in this word.",
										"type": "boolean"
									},
									"isLexicalForm": {
										"description": "Indicator if this Syriac word is the lexeme form.",
										"type": "boolean"
									},
									"isEnclitic": {
										"description": "Indicator if this Syriac word is an enclitic.",
										"type": "boolean"
									},
									"isTheoretical": {
										"description": "Indicator if this Syriac word is theoretical or it is attested.",
										"type": "boolean"
									}
								}
							}
						}
					}
				}
			}
		},
		"/lexeme/{id}": {
			"get": {
				"tags": ["API"],
				"summary": "Get Syriac lexeme.",
				"description": "Returns linguistic information for a Syriac lexeme.",
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "The Id of a lexeme from the Sedra database.",
					"type": "string",
					"required": true
				}],
				"responses": {
					"200": {
						"description": "A Syriac lexeme.",
						"schema": {
							"type": "object",
							"required": ["lexeme", "syriac"],
							"properties": {
								"lexeme": {
									"description": "Id and link to this Syriac lexeme.",
									"$ref": "./definitions.json#/ObjectReference"
								},
								"syriac": {
									"description": "Consonantal form of this Syriac lexeme.",
									"type": "string"
								},
								"glosses": {
									"$ref": "./definitions.json#/LocalizedStrings"
								},
								"etymologies": {
									"$ref": "./definitions.json#/LocalizedStrings"
								},
								"root": {
									"$ref": "./definitions.json#/ObjectReference"
								},
								"words": {
									"type": "array",
									"items": {
										"$ref": "./definitions.json#/ObjectReference"
									}
								},
								"categoryType": {
									"$ref": "./definitions.json#/CategoryType"
								},
								"kaylo": {
									"$ref": "./definitions.json#/Kaylo"
								},
							}
						}
					}
				}
			}
		}
	}
}
